// 문제 유형: [이진 탐색 문제, 수학 문제]
/**
 * 문제 설명:
 * 주어진 0 이상의 정수 x에 대해, x의 제곱근을 내림하여 가장 가까운 정수로 반환하세요. 반환되는 정수도 0 이상이어야 합니다. 
 * 제곱근 계산에 내장 함수나 연산자를 사용할 수 없습니다.
 * 
 * 제한 사항:
 * 1. 0 <= x <= 2^31 - 1
 * 2. 내장 함수 pow(x, 0.5) 또는 x ** 0.5 사용 금지
 * 
 * 입출력 예:
 * x = 4 -> return 2
 * x = 8 -> return 2
 * x = 16 -> return 4
 * 
 * 입출력 예 설명:
 * 1. 예제 #1: x가 4일 때, 제곱근은 2이므로 그대로 반환합니다.
 * 2. 예제 #2: x가 8일 때, 제곱근은 2.828...이므로 내림하여 2를 반환합니다.
 * 3. 예제 #3: x가 16일 때, 제곱근은 4이므로 그대로 반환합니다.
 */

function solution(x) {
    let left = 0, right = x;

    while (left <= right) {
        let mid = Math.floor((left + right) / 2); // 중간값 계산
        let pow = mid * mid; // mid의 제곱
        if (pow === x) { 
            return mid; // 정확히 제곱근을 찾은 경우
        } else if (pow < x) { 
            left = mid + 1; // 더 큰 값 탐색
        } else {
            right = mid - 1; // 더 작은 값 탐색
        }
    }
    return right; // 가장 가까운 내림된 값 반환
}

// 입출력 예시 테스트
console.log(solution(4));  // 기대 값: 2
console.log(solution(8));  // 기대 값: 2
console.log(solution(16)); // 기대 값: 4

/**
 * 시간 복잡도:
 * O(log x) - 이진 탐색을 사용하여 값의 범위를 절반씩 줄이므로 로그 시간 복잡도를 가집니다.
 * 
 * 공간 복잡도:
 * O(1) - 추가적인 메모리 사용 없이 변수만 사용합니다.
 */

/**
 * 개선할 점:
 * 1. **브루트포스 방식**을 활용한 단순 구현:
 *    - 브루트포스 방식은 0부터 시작하여 제곱 값을 확인하며 조건에 맞는 값을 찾습니다.
 *    - 시간 복잡도: O(√x), 작은 값에서는 간단하고 효과적입니다.
 *    - 구현 예:
 *      ```javascript
 *      function bruteForceSqrt(x) {
 *          let sqrt = 0;
 *          while (sqrt * sqrt <= x) {
 *              sqrt++;
 *          }
 *          return sqrt - 1;
 *      }
 *      ```
 * 2. **제약 조건에 따른 선택**:
 *    - 입력 값의 크기가 작거나 구현의 간결함이 중요하다면 브루트포스 방식이 적합.
 *    - 입력 값의 크기가 매우 크다면 이진 탐색을 사용하는 것이 효율적.
 */